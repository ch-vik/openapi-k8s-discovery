name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout and Setup
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare Release
        id: prepare
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          
          # Check if it's a pre-release
          if [[ "$VERSION" == *"-"* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release version"
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
            echo "This is a final release version"
          fi
          
          # Configure git
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Update Chart and Generate Changelog
        run: |
          # Update Chart.yaml with the Git tag version
          sed -i "s/^version: .*/version: ${{ steps.prepare.outputs.VERSION }}/" helm/openapi-k8s-operator/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"${{ steps.prepare.outputs.VERSION }}\"/" helm/openapi-k8s-operator/Chart.yaml
          
          echo "Updated Chart.yaml:"
          echo "  version: ${{ steps.prepare.outputs.VERSION }}"
          echo "  appVersion: ${{ steps.prepare.outputs.VERSION }}"
          
          # Commit the changes
          git add helm/openapi-k8s-operator/Chart.yaml
          git commit -m "chore: update Chart.yaml version to ${{ steps.prepare.outputs.VERSION }}"
          
          # Generate changelog
          curl -sSL "https://github.com/cocogitto/cocogitto/releases/latest/download/cocogitto-$(curl -s https://api.github.com/repos/cocogitto/cocogitto/releases/latest | jq -r '.tag_name')-x86_64-unknown-linux-musl.tar.gz" | tar -xz
          sudo mv x86_64-unknown-linux-musl/cog /usr/local/bin/cocogitto
          chmod +x /usr/local/bin/cocogitto
          cocogitto changelog > CHANGELOG.md
          
          echo "Generated changelog:"
          head -10 CHANGELOG.md

      - name: Package and Release
        run: |
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Package Helm chart
          mkdir -p ./packages
          helm package helm/openapi-k8s-operator --destination ./packages
          
          echo "Packaged chart:"
          ls -la ./packages/
          
          # Create GitHub release
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ steps.prepare.outputs.VERSION }}" \
            --notes-file CHANGELOG.md \
            --prerelease=${{ steps.prepare.outputs.IS_PRERELEASE }} \
            ./packages/openapi-k8s-operator-${{ steps.prepare.outputs.VERSION }}.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm Repository Index
        run: |
          if ! git clone --branch gh-pages --single-branch https://github.com/${{ github.repository }}.git gh-pages 2>/dev/null; then
            echo "gh-pages branch doesn't exist, creating it..."
            mkdir -p gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            git remote add origin https://github.com/${{ github.repository }}.git
          else
            cd gh-pages
          fi
          
          cp ../packages/openapi-k8s-operator-${{ steps.prepare.outputs.VERSION }}.tgz .
          
          helm repo index . --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add .
          git commit -m "chore: update helm chart index for ${{ steps.prepare.outputs.VERSION }}"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
